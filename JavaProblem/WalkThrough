## WalkThrough

1. Creation of an instance of logger so it would be easier to debug the program
2. Change the folder structure
3. Analyze and understand the update() function. Several algorithms for a single function. The Strategy pattern is going to come into play.
4. What do these items have in common ?
Answer : Changing the quality and the sell in day of an item. Creation of the models (Agedbrie, BackstagePasses, Sulfuras and so on) and the abstract class that is going to implement the common functions which are responsible of changing the quality and the sell in day of an item.
PS: Another solution would have been to use an interface. It's not the best solution though. A function of an abstract class can either be private, protected or public. Using an interface - in this case - would mean that the updateSellIn(Item item) and  updateQuality(Item item) would be public. You don't want to do that as it would break the business logic when an item is updated.
5. Implementation of the business logic for all the items
6. Implementation of the factory that is responsible for initialising the right model

## Improvements
1. Change the class variables from Item class to private...
2. Upgrade the project to java 1.7 to use a switch case (joking...)
3. Add toString function in the Item class so the debug would be easier